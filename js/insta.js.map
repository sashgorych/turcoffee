{"version":3,"names":[],"mappings":"","sources":["insta.js"],"sourcesContent":["var InstaParser = function () {\r\n    \"use strict\";\r\n    var t = function () {\r\n        return (t = Object.assign || function (t) {\r\n            for (var n, o = 1, r = arguments.length; o < r; o++) for (var e in n = arguments[o]) Object.prototype.hasOwnProperty.call(n, e) && (t[e] = n[e]);\r\n            return t\r\n        }).apply(this, arguments)\r\n    };\r\n    function n(t, n, o, r) {\r\n        return new (o || (o = Promise))((function (e, i) {\r\n            function l(t) {\r\n                try {\r\n                    u(r.next(t))\r\n                } catch (t) {\r\n                    i(t)\r\n                }\r\n            }\r\n\r\n            function a(t) {\r\n                try {\r\n                    u(r.throw(t))\r\n                } catch (t) {\r\n                    i(t)\r\n                }\r\n            }\r\n\r\n            function u(t) {\r\n                var n;\r\n                t.done ? e(t.value) : (n = t.value, n instanceof o ? n : new o((function (t) {\r\n                    t(n)\r\n                }))).then(l, a)\r\n            }\r\n\r\n            u((r = r.apply(t, n || [])).next())\r\n        }))\r\n    }\r\n    function o(t, n) {\r\n        var o, r, e, i, l = {\r\n            label: 0, sent: function () {\r\n                if (1 & e[0]) throw e[1];\r\n                return e[1]\r\n            }, trys: [], ops: []\r\n        };\r\n        return i = {\r\n            next: a(0),\r\n            throw: a(1),\r\n            return: a(2)\r\n        }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function () {\r\n            return this\r\n        }), i;\r\n\r\n        function a(i) {\r\n            return function (a) {\r\n                return function (i) {\r\n                    if (o) throw new TypeError(\"Generator is already executing.\");\r\n                    for (; l;) try {\r\n                        if (o = 1, r && (e = 2 & i[0] ? r.return : i[0] ? r.throw || ((e = r.return) && e.call(r), 0) : r.next) && !(e = e.call(r, i[1])).done) return e;\r\n                        switch (r = 0, e && (i = [2 & i[0], e.value]), i[0]) {\r\n                            case 0:\r\n                            case 1:\r\n                                e = i;\r\n                                break;\r\n                            case 4:\r\n                                return l.label++, {value: i[1], done: !1};\r\n                            case 5:\r\n                                l.label++, r = i[1], i = [0];\r\n                                continue;\r\n                            case 7:\r\n                                i = l.ops.pop(), l.trys.pop();\r\n                                continue;\r\n                            default:\r\n                                if (!(e = l.trys, (e = e.length > 0 && e[e.length - 1]) || 6 !== i[0] && 2 !== i[0])) {\r\n                                    l = 0;\r\n                                    continue\r\n                                }\r\n                                if (3 === i[0] && (!e || i[1] > e[0] && i[1] < e[3])) {\r\n                                    l.label = i[1];\r\n                                    break\r\n                                }\r\n                                if (6 === i[0] && l.label < e[1]) {\r\n                                    l.label = e[1], e = i;\r\n                                    break\r\n                                }\r\n                                if (e && l.label < e[2]) {\r\n                                    l.label = e[2], l.ops.push(i);\r\n                                    break\r\n                                }\r\n                                e[2] && l.ops.pop(), l.trys.pop();\r\n                                continue\r\n                        }\r\n                        i = n.call(t, l)\r\n                    } catch (t) {\r\n                        i = [6, t], r = 0\r\n                    } finally {\r\n                        o = e = 0\r\n                    }\r\n                    if (5 & i[0]) throw i[1];\r\n                    return {value: i[0] ? i[1] : void 0, done: !0}\r\n                }([i, a])\r\n            }\r\n        }\r\n    }\r\n    function parseUsernameURL(url) {\r\n        let regexp = /(?:(?:http|https):\\/\\/)?(?:www\\.)?(?:instagram\\.com|instagr\\.am)\\/([A-Za-z0-9-_\\.]+)/im;\r\n        let match = url.match(regexp);\r\n        return match[1];\r\n    }\r\n    return function () {\r\n        function instagramRegExp() {\r\n            this.INSTAGRAM_HOSTNAME = \"https://www.instagram.com/\", this.SHARED_DATA_TAG_EXP = /^[\\w\\W]*<script type=\"text\\/javascript\">window._sharedData = ({[\\w\\W]*});<\\/script>[\\w\\W]*$/g\r\n        }\r\n        return instagramRegExp.prototype.buildUrl = function (t) {\r\n            return \"\" + this.INSTAGRAM_HOSTNAME + t\r\n        },\r\n            instagramRegExp.prototype.parseJSON = function (t, n) {\r\n            try {\r\n                var o = t;\r\n                return n && (o = t.replace(this.SHARED_DATA_TAG_EXP, \"$1\")), JSON.parse(o)\r\n            } catch (t) {\r\n                console.error(\"Nanogram: failure during parsing JSON.\\nError message: \" + t.message)\r\n            }\r\n        },\r\n            instagramRegExp.prototype.HTTP = function (t, r) {\r\n            return void 0 === r && (r = !0), n(this, void 0, void 0, (function () {\r\n                var n;\r\n                return o(this, (function (o) {\r\n                    switch (o.label) {\r\n                        case 0:\r\n                            return [4, function (t, n) {\r\n                                return new Promise((function (o, r) {\r\n                                    var e = new XMLHttpRequest;\r\n                                    e.open(t, n), e.onload = function () {\r\n                                        return o(e)\r\n                                    }, e.onerror = r, e.send()\r\n                                }))\r\n                            }(\"GET\", t).then((function (t) {\r\n                                if (t.status >= 200 && t.status < 400) return t.responseText;\r\n                                console.error([\"Nanogram: error during request\", \"Probably making too many requests to the Instagram application.\", \"Also check method parameters\"].join(\"\\n\"))\r\n                            }))];\r\n                        case 1:\r\n                            return (n = o.sent()) ? [2, this.parseJSON(n, r)] : [2]\r\n                    }\r\n                }))\r\n            }))\r\n        },\r\n            instagramRegExp.logError = function (t) {\r\n            var n = \"Nanogram: please provide a valid \" + t.join(\" and \");\r\n            console.error(n)\r\n        },\r\n            instagramRegExp.prototype.getMediaByLink = function (params) {\r\n            let e = parseUsernameURL(params.link)\r\n            var i, l, a;\r\n            let as = n(this, void 0, void 0, (function () {\r\n                var n, u, s, c;\r\n                return o(this, (function (o) {\r\n                    switch (o.label) {\r\n                        case 0:\r\n                            return n = {\r\n                                posts: null,\r\n                                ok: !1\r\n                            }, e ? (u = this.buildUrl(e), [4, this.HTTP(u)]) : (r.logError([\"username\"]), [2, n]);\r\n                        case 1:\r\n                            return s = o.sent(), c = (null === (a = null === (l = null === (i = null == s ? void 0 : s.entry_data) || void 0 === i ? void 0 : i.ProfilePage[0]) || void 0 === l ? void 0 : l.graphql) || void 0 === a ? void 0 : a.user) || null, [2, t(t({}, n), {\r\n                                posts: c['edge_owner_to_timeline_media']['edges'].splice(0, params.postsCount).map(el=>{\r\n                                    return {\r\n                                        url: `https://www.instagram.com/p/${el.node.shortcode}/`,\r\n                                        thumbnailUrl: el.node.thumbnail_src,\r\n                                        displayUrl: el.node.display_url,\r\n                                        likes: el.node.edge_media_preview_like.count,\r\n                                        comment: el.node.edge_media_to_comment.count,\r\n                                        caption: el.node.edge_media_to_caption.edges[0].node.text,\r\n                                        owner: el.node.owner,\r\n                                        thumbnail_resources: el.node.thumbnail_resources\r\n                                    }\r\n                                }),\r\n\r\n                                ok: Boolean(c)\r\n                            })]\r\n                    }\r\n                }))\r\n            }))\r\n                let xcont = document.querySelector(params.container);\r\n\r\n                switch (params.render){\r\n                    case 'customFunction':\r\n                        as.then( media=>{\r\n                                    params.renderFunction(media.posts)\r\n                            }\r\n                        )\r\n                        break;\r\n                    default:\r\n                        as.then( media=>{\r\n                                console.log(media)\r\n                                if (xcont) {\r\n                                    xcont.classList.add('insta-parser-container')\r\n                                    xcont.insertAdjacentHTML('beforeend',`<div class=\"insta-parser\"></div>`)\r\n                                    let cont = xcont.querySelector('.insta-parser')\r\n\r\n                                    insertInDomInstaPosts(media.posts,cont)\r\n                                }\r\n                            }\r\n                        )\r\n                }\r\n                switch (params.colInRow) {\r\n                    case 3:\r\n                        xcont.classList.add('insta-col3')\r\n                        break;\r\n                    case 4:\r\n                        xcont.classList.add('insta-col4')\r\n\r\n                        break;\r\n                    default:\r\n                        xcont.classList.add('insta-col3')\r\n\r\n                }\r\n\r\n        },\r\n            instagramRegExp\r\n    }()\r\n}();\r\nfunction insertInDomInstaPosts(posts,container) {\r\n    posts.forEach(el => {\r\n        const a = document.createElement('a');\r\n        const v = `<div class=\"post_icons\">\r\n    <ul>\r\n        <li>\r\n            <span class=\"inst-icon icon-like\"></span>\r\n            <span class=\"inst-count\">${el.likes}</span>\r\n        </li>\r\n        <li>\r\n            <span class=\"inst-icon icon-comment\"></span>\r\n            <span class=\"inst-count\">${el.comment}</span>\r\n        </li>\r\n    </ul>\r\n</div>\r\n`\r\n        const img = document.createElement('img');\r\n\r\n        a.setAttribute('href', el.url);\r\n        a.setAttribute('target', '_blank');\r\n        a.setAttribute('rel', 'noopener noreferrer');\r\n        a.classList.add('instagram-photo');\r\n\r\n        img.setAttribute('src', el.thumbnailUrl);\r\n        img.setAttribute('alt', el.caption);\r\n\r\n        a.appendChild(img);\r\n        a.insertAdjacentHTML(\"beforeend\", v);\r\n        container.appendChild(a);\r\n    })\r\n}"],"file":"insta.js"}